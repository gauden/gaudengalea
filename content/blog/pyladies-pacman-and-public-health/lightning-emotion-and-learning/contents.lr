_model: deep-dive
---
title: Lightning, Emotion, and Learning
---
order: 2
---
body:

## Lightning Talks

The lightning talks stunned me. I kept thinking it was time for me to leave, since they came at the end of the days, but like a forbidden snack, I kept staying for just one more. Ultra-short presentations with sudden shifts from the emotional, to the weird, to the hilarious. Here's a sample:

- Armin Ronacher, star developer whose tools have been used by every single person in the hall, moved us all: ‚ÄúPython gave me my life and this community made me who I am‚Äù, he said, paying tribute to those who had inducted him into the language.
- Then a medley: knitting as a binary product; how to pronounce PyPI; weird and wonderful Olympic mascots; building underwater, Python-driven robots; the thriving Python Community in Africa; riding Python-powered e-bikes from Switzerland to Prague (for the conference) and back; a pop-up band of musicians playing the language anthem: always look on the bright side of life.
- And an amazing teen (was he the youngest in the conference?) who set the audience abuzz with applause and hilarity as he demonstrated his school project to play the buzzer on the Arduino.

The Lightning Talks serve as a sampler of the community at large, incredibly diverse, incredibly joyful.
## TL;DR for Formal Talks

Here are snippets from the talks I enjoyed, with AI-generated summaries from my notes, and a personal reaction for each.
### üì¶ Caching in Python (Akshita Gupta)

**AI snippet**: A walk through caching, from DNS caches in browsers, to local use of `functools.lru_cache` and `functools.cache`, to distributed systems like Redis and Memcached. Pattern: Cache the results of function; later, look for the same inputs and retrieve the results; on a miss, compute and store the result; set policies to expire, evict, or refresh entries as needed. AK explained everything with neat layering of icons and animations.  

**Personal note**: Wow, a masterclass. AG gets the "highest bandwidth" award from me, the most explained with the least number of words on screen. Keen to start applying the lessons. Baby steps: start using the `functools` decorators for function memoization. And... how about trying to improve my times in last December's [Advent of Code](https://adventofcode.com)? More seriously, look at JobLib for parallel execution of data-intensive tasks.
### üåê Democratizing Serverless AI Apps (Yuichiro Tachibana)

**AI snippet**: YT converted a Python script step by step from a prosaic data processing effort into a serverless `Streamlit` AI app using `Pyodide` and `Stlite`, with the addition of `transformers.js.py` for sentiment analysis. The result: a fully client-side AI web app (HTML-only), that preserves privacy, enables easy sharing, and reduces cost. 

**Personal note**: I had a double-take towards the end of the talk: YT ([whitphx](https://github.com/whitphx)) is the developer of both `stlite` and `transformers.js.py` -- the libraries he was so expertly yet playfully demonstrating. I shall definitely try these.
### üìö PyScript + EduBlocks (Josh Lowe)

**AI snippet**: To scale [EduBlocks](https://edublocks.org/) (free block-based Python learning for children) *without server costs*, Josh uses PyScript. The result: 300K monthly users, **no backend infrastructure required**. 

**Personal note**: I have to admit that I tried out PyScript too early on and wasn't impressed. But this was a totally different world. Amazing! I won‚Äôt be writing another EduBlocks web app, but it would be interesting to try adding PyScript to utilities hosted on ‚Äústatic‚Äù pages.
### üß† Generative AI's Promises & Pitfalls (Keynote by Nerea Luis)

**AI snippet**: NL's keynote covered GenAI‚Äôs rapid rise, shifting tech roles, and blurring lines of accountability: who wrote the code when AI copilots are used? Who takes the blame when AI agents are in the loop? Key message to developers: cultivate adaptable AI habits, not tool dependency. Over the next five years the following will change due to AI, all in unforeseeable ways: search, info analysis, service consumption, communication, and the development of digital products and projects. 

**Personal note**: Follow the OWASP lists for new vulnerabilities (e.g., [the LLM cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/LLM_Prompt_Injection_Prevention_Cheat_Sheet.html)), and the [AI CEO letters site](https://aiceoletters.com/) for AI dreams at the head of large companies.
### ‚öôÔ∏è Async Python Basics (KW & MZ)

**AI snippet**: A fast, fun intro to `async`/`await`, coroutines, the event loop, and `asyncio.gather`. They focused on the standard library and the logic and pitfalls of concurrency. Tools also mentioned: `anyio`, `asyncer`.

**Personal note**: Finally, I felt I understood the concepts -- I had had threads, processes, and concurrency in a jumble in my mind, and I just avoided all of that. The presenters used a clever metaphor for concurrency: they passed a sceptre (blue and yellow, topped with the Python logo) as they took turns speaking. It stood for control flow, as Python shifts from executing to waiting. Loved it.
### üêç Python Performance ‚ÄúSnake Oil‚Äù (Sindre Nistad)

**AI snippet**: With tongue firmly in cheek and sheer virtuosity, Sindre delivered real speed gains in Python using C, Rust, Numba, and others. He started with the original Mandelbrot set, plotted in asterisks on a dot matrix printer, to animated visuals live, at high FPS, zooming rapidly down as far as Python's floating point numbers will allow. 

**Personal note**: Funny and brilliant. Loved the _snake_ oil pun for Python performance (geddit?). Not sure there was much Python code left on screen by the end, though. Nor that I will be able to emulate any of this any time soon. It was just astounding to watch.
### ü§ñ Automating the Unloved Project (Sebastian Witowski)

**AI snippet**: Sebastian automated a side project (stock-trading signals) with Python, n8n, and Telegram bots. It was asking too much of his time, with too little income to show for it. And though he built it to scratch his own itch to begin with, he no longer had any personal use for it himself.

**Personal note**: thinking of a side project? Automate early, set boundaries, don‚Äôt confuse passive income with no effort, and plan your exit. Candid, and practical.

### üõ†Ô∏è Building & Deploying AI Agents in VS Code (Sharon Xu)

**AI snippet**: SX used Microsoft‚Äôs [AI Toolkit in VS Code](https://code.visualstudio.com/docs/intelligentapps/overview) to build and deploy an AI agent locally, live, in real time. She used GitHub Copilot to create both front and back ends, and deployed to the cloud. Less than 30 minutes; including a few minutes of projector glitch.

**Personal note**: This talk made agents and MCP much more accessible and provided an elegant example of a simple but effective app at the end. Made it look so easy, as experts do. Added to my list for trying out.


---
pub_date: 2025-07-31
---
summary: In which I sample the sheer variety of the talks, and hint at the energy, the joy, the surprises, the insights and delights of the conference.
---
title: Lightning, Emotion, and Learning
